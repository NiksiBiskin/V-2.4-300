[force_move]
enable_force_move: True

[include mainsail.cfg]
[mcu]
#serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_470035001951303439363932-if00
serial: /dev/ttyAMA0
restart_method: command

[idle_timeout]
timeout: 7200

[virtual_sdcard]
path: ~/printer_data/gcodes

on_error_gcode:
    SAVE_GCODE_STATE NAME=on_error_gcode
    G91
    G1 Z10 F6000
    RESTORE_GCODE_STATE NAME=on_error_gcode

[mcu rpi]
serial: /tmp/klipper_host_mcu

[pause_resume]
recover_velocity: 250

[gcode_arcs]
resolution: 0.1

[printer]
kinematics: corexy
max_velocity: 500
max_accel: 15000
max_z_velocity: 15
max_z_accel: 350
minimum_cruise_ratio: 0.5
square_corner_velocity: 10.0



[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

[temperature_sensor Spider]
sensor_type: temperature_mcu
sensor_mcu: mcu
min_temp: 10
max_temp: 80

[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}

[exclude_object]

[respond]
  

#####################################################################
#  Stepper Settings
#####################################################################
[include stepper.cfg]
[include tmc.cfg]
[include ebb36_config.cfg]
[include cartographer.cfg]

#[lis2dw]
#cs_pin: cartographer:PA3
#spi_bus: spi1

#[resonance_tester]
#accel_chip: lis2dw
#probe_points: 
#  145, 145, 20

#####################################################################
#  Extruder & Bed; Heater Verification (default values)
#####################################################################
[include heater.cfg]
#[include heater_verify.cfg]

#####################################################################
#  Probe and Gantry Adjustment Routines
#####################################################################
[include probe_qgl.cfg]

#####################################################################
#  Fan Control & Extra Thermistor
#####################################################################
[include fan.cfg]

#####################################################################
#  Caselight Control
#####################################################################
#[include caselight.cfg]

#####################################################################
#  Homing Routines
#####################################################################
[include homing.cfg]
   
#####################################################################
#  Bed Mesh 
#####################################################################
[include bed_mesh.cfg]

######################################################################
#  Resonance compensation
######################################################################
[include input_shaper.cfg]

#####################################################################
#   Display & Custom Menu
#####################################################################
#[include lcd.cfg]
#[include display_menu.cfg]

#####################################################################
#  Macros
#####################################################################
[include basic_macro.cfg]
[include macro.cfg]
[include park_macro.cfg]
[include debug_macro.cfg]

#####################################################################
#  moonraker/mainsail
##################################################################### 
[include webclient.cfg]

#####################################################################
# Power relays
##################################################################### 
#[include power.cfg]

#####################################################################
#  print and service time storage
##################################################################### 
[include printtime.cfg]

#####################################################################
#  probe accuracy test
#####################################################################
#[include test_probe_accuracy.cfg]

#####################################################################
#  flexplate select menu
#####################################################################
#[include flexplate.cfg]

#####################################################################
#  filament and pressure advance
#####################################################################
[include filament.cfg]
[include pressure_advance.cfg]

#####################################################################
#  filament runout sensor
#####################################################################
#[include runout.cfg]

#####################################################################
#  force move used only if gantry is at z max
#####################################################################
#[include force_move.cfg]

#####################################################################
#  MagProbe instead of Sensor
#####################################################################
#[include magprobe.cfg]
#[include euclid.cfg]

#####################################################################
#  Z_calibration needs <https://github.com/protoloft/klipper_z_calibration>
#####################################################################
#[include z_calibration.cfg]

#####################################################################
#  timelaps needs <https://github.com/mainsail-crew/moonraker-timelapse.git>
#####################################################################
#[include timelapse.cfg]

#####################################################################
#  Enable Execute Object (beta)
#####################################################################
[exclude_object]

#####################################################################
#  File location of stored varibales
######################################################################
[save_variables]
filename: /home/pi/printer_data/config/.variables.stb

#####################################################################
#  Virtual SD Card
#####################################################################
[virtual_sdcard]
path: /home/pi/printer_data/gcodes


[include K-ShakeTune/*.cfg]


#[EXCLUDE_OBJECT]
#[EXCLUDE_OBJECT_DEFINE]
#[EXCLUDE_OBJECT_START]
#[EXCLUDE_OBJECT_END]

#  macro that run at klipper start
[delayed_gcode _INIT]
initial_duration: 1
gcode:
  _USER_VARIABLE
  _CHECK_CONSITENT
  _EXECUTE_AT_INIT

#  macro that run at klipper start
[delayed_gcode _INIT]
initial_duration: 1
gcode:
  _USER_VARIABLE
  _CHECK_CONSITENT
  _EXECUTE_AT_INIT

[gcode_macro _EXECUTE_AT_INIT]
description: Helper: Everything that should run at klipper start
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  {% if 'gcode_macro _MENU_LIMITS' is in printer %} _MENU_LIMITS INDEX=4 {% endif %}
  {% if printer.save_variables.variables.filament_sensor %} _RESTORE_FILAMENT_SENSOR {% endif %}
  {% if user.hw.filter.ena %} _CHECK_FILTER {% endif %}
  {% if user.hw.relay.ena %} _HEATER_ON {% endif %}
  {% if user.hw.display.ena %} UPDATE_DELAYED_GCODE ID=_DISPLAY_INIT DURATION=2 {% endif %}
  _PRINT_AR T="Klipper INIT done"

[gcode_macro _CHECK_CONSITENT]
description: Helper: Check that some criterias are meet in the printer.cfg
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  {% set text = ["CONFIG: ERROR"] %}
  {% if user.run is not defined %}
    {% set _dummy = text.append("_USER_VARIABLE macro missing") %}
  {% elif not user.run %}
    {% set _dummy = text.append("_USER_VARIABLE macro not executed") %}
  {% endif %}
  {% if user.hw.auto_z_offset.auto and not user.hw.mag_probe.ena %}
    {% set _dummy = text.append("[z_calibration] defined but no MagProbe\n") %}
  {% endif %}
  {% if 'save_variables' not in printer %}
    {% set _dummy = text.append("[save_variables] missing") %}
  {% endif %}
  {% if 'virtual_sdcard' not in printer %}
    {% set _dummy = text.append("[virtual_sdcard] missing") %}
  {% endif %}
  {% if text|length > 1 %}
    {action_respond_info(text|join("\n"))}
  {% endif %}

[gcode_macro _USER_VARIABLE]
description: Helper: Contains User defined printer variables
##### see the readme for the variable definition #####
variable_hw: {}
variable_homing: {}
variable_z_hop: 0
variable_speed: {}   
variable_probe: {}
variable_park: {}
variable_filament: {}
variable_purge: {}
variable_print_start: {}
variable_unload_sd: False
variable_prime: {}
variable_respond: {}
variable_peripheral: {}
variable_run: False
gcode:
    ###################################################################
  ##                     start of user defines                     ## 
  ## this needs to be changed for your printer                     ##
  ###################################################################
  {% set user_z_endstop_xy = [150,150] %}  ; z Endstop position insight right profil
  #{% set user_z_endstop_xy = [123.0,355.0] %}  ; z Endstop position insight left profil
  {% set user_z_endstop_hop = 7.5 %}           ; z hop for moves e.g homimg
  {% set user_z_home_current = 0.3 %}          ; reduced homing curent for z
  {% set user_home_accel = 1200 %}             ; reduced ACCEL for homing
  {% set user_bed_y_offset = 5 %}              ; Endstop offset to bed max y
  ##### all user defined speeds [mm/sec] #####
  {% set user_z_hop_speed = 15 %}              ; default z_hop speed
  {% set user_retract_speed = 30 %}            ; default retract/extrude speed
  {% set user_travel_speed = 300 %}            ; travel speed e.g park, dock ...
  {% set user_probe_dock_speed = 50 %}         ; dock speed for attach/dock
  {% set user_filament_load_speed = 50 %}      ; load/unload speed
  {% set user_wipe_speed = 70 %}               ; wipe move speed 
  {% set user_prime_speed = 25 %}              ; prime line speed  
  ##### Mag Probe #####
  {% set user_probe_dock_pos = [22,295] %}      ; position of the dock 
  {% set user_probe_delta_x = 22 %}            ; x offset for position before dock
  {% set user_probe_delta_y = -30 %}           ; y offset to move probe out of dock
  {% set user_z_probe_hop = 15.5 %}            ; z minimum heigh to avoid crash vorher15.5
  ##### Park Position #####
  {% set user_park_xy_delta = 80 %}            ; distance for x or y from the edge
  {% set user_park_z_max_delta = 40 %}         ; insure to do not hit cam in front
  {% set user_park_z_min = 30 %}               ; minimal z from bed
  {% set user_park_pause_z_delta = 2.0 %}      ; distance to increase head while PAUSE/CANCEL_PRINT
  {% set user_park_at_cancel = False %}        ; park head at CANCEL_PRINT if not paused [False/True]
  ##### Filament #####
  {% set user_extruder_min_add = 30 %}         ; Temperature add to min Extruder temp
  {% set user_load_distance = 90 %}            ; load distance while load filament
  {% set user_load_extrude = 50 %}             ; extrude distance while load filament
  {% set user_unload_distance = 75 %}          ; unload distance while unload filament
  {% set user_retract_end = 2 %}               ; retract distance at PRINT_END or CANCEL_PRINT
  {% set user_retract_pause = 1 %}             ; retract/extrude distance while PAUSE or RESUME
  ##### Purge & Brush #####
  {% set user_brush_pos = 'right' %}           ; left/right profile used
  {% set user__brush_x_middle = 252 %}        ; mid point of brush at left profile
  {% set user_brush_x_middle = 252 %}          ; mid point of brush at right profil
  {% set user_brush_x_width = 50 %}            ; width of brush
  {% set user_brush_y_start = 305 %}           ; start point at y
  {% set user_wipe_z = 1.0 %}                  ; z for wipe moves
  {% set user_wipe_cnt = 5 %}                  ; number of full wipes
  {% set user_z_purge = 2.5 %}                 ; z above purge bucket
  ##### PRINT_START/STOP #####
  {% set user_print_start_bed_up = 10 %}       ; bed temp raise for faster heat soak
  {% set user_print_start_ival = 1 %}          ; wait time per call in sec
  {% set user_print_start_extruder_time = 3 %} ; time in minutes before soak end to start extruder heating 
  {% set user_print_start_bed_time = 3 %}      ; time in minutes before soak end to set bed target temp
  {% set user_print_start_prime_mult = 2 %}    ; multiplier for prime line hight 
  {% set user_unload_sd = True %}              ; unload sd file at PRINT_END or CANCEL_PRINT [True,False]
  ##### Prime Line #####
  {% set user_prime_start_xy = [7.0,30.0] %}   ; x&y start coordinates of prime line
  {% set user_prime_z = 0.34 %}                ; default prime layer hight
  {% set user_prime_dir = 'Y+' %}              ; direction of prime line (X+, X-, Y+, Y-)
  {% set user_prime_spacing = 0.4 %}           ; distance between line, move will allways positive
  {% set user_prime_lenght = 220 %}            ; length of prime line
  {% set user_prime_seg = 11 %}                ; segments in that the prime line is splitted
  {% set user_prime_extrude_per_seg = 2 %}     ; amount of filament extruded per segment
  ##### Respond defaults #####
  # Default behaivior for output messages of the macro 0: no output 1: console output
  {% set user_respond_set_z_current = 0 %}     ; Macro: _SET_Z_CURRENT
  {% set user_respond_set_acc = 0 %}           ; Macro: _SET_ACC
  {% set user_respond_probe_action = 1 %}      ; Macro: _PROBE_ACTION
  {% set user_respond_layer = 0 %}             ; Macro: _LAYER
  ##### Peripheral #####
  {% set user_filter_on = 0.5 %}               ; filter on value
  {% set user_filter_use_time = 80 %}          ; Nevermore change warning limit 
  {% set user_vent_on = 15 %}                  ; chamber fan on temperature                        
  {% set user_caselight_on = 0.4 %}            ; caselight on value
  {% set user_fan_run_after_print = 30 %}      ; time in min to run filter and chamber exhaust after print finsih 
  ###################################################################
  ##                      end of user defines                      ## 
  ###################################################################
  # get printer limits & cfg value
  {% set min = printer.toolhead.axis_minimum %}
  {% set max = printer.toolhead.axis_maximum %}
  {% set cfg_endstop_z_offset = printer.configfile.settings.stepper_z.position_endstop|default(0.0)|float %}
  # detect additional hardware
  {% set hw_dic = {'display'       : {'ena' : True if 'neopixel neo_display' in printer.configfile.settings 
                                         else False},
                   'chamber'       : {'type': 'sensor' if 'temperature_sensor chamber' in printer.configfile.settings
                                         else 'fan'    if 'temperature_fan chamber' in printer.configfile.settings 
                                         else 'none'},
                   'caselight'     : {'ena' : True if 'output_pin caselight' in printer.configfile.settings 
                                         else False},
                   'filter'        : {'ena' : True if 'fan_generic filter' in printer.configfile.settings 
                                         else False},
                   'runout'        : {'type': 'switch' if 'filament_switch_sensor runout' in printer.configfile.settings
                                         else 'motion' if 'filament_motion_sensor runout' in printer.configfile.settings
                                         else 'file'   if 'save_variables' in printer and filament_loaded in printer.save_variables.variables 
                                         else 'none'},
                   'relay'         : {'ena' : True if 'output_pin extruder_relay'   in printer.configfile.settings and
                                                      'output_pin heater_bed_relay' in printer.configfile.settings 
                                         else False},
                   'auto_z_offset' : {'type': 'z_calib+flexplate' if 'z_calibration' in printer and 'save_variables' in printer and 'plates' in printer.save_variables.variables
                                         else 'z_calib'           if 'z_calibration' in printer
                                         else 'flexplate'         if 'save_variables' in printer and 'plates' in printer.save_variables.variables 
                                         else 'none'},
                   'mag_probe'     : {'ena' : True if printer['gcode_macro _MAG_PROBE'] is defined or 'dockable_probe' in printer 
                                         else False},
                   'endstop_temp'  : {'ena' : True if 'temperature_sensor endstop' in printer.configfile.settings 
                                         else False}}%}
  {% set _dummy = hw_dic.chamber.update({'ena': True if hw_dic.chamber.type != 'none' else False}) %}
  {% set _dummy = hw_dic.chamber.update({'fan': True if hw_dic.chamber.type == 'fan' else False}) %}
  {% set _dummy = hw_dic.runout.update({'ena': True if hw_dic.runout.type != 'none' else False}) %}
  {% set _dummy = hw_dic.runout.update({'sensor': True if hw_dic.runout.type == 'switch' or hw_dic.runout.type == 'motion'
                                             else False}) %}
  {% set _dummy = hw_dic.auto_z_offset.update({'ena': True if hw_dic.auto_z_offset.type != 'none' else False}) %}
  {% set _dummy = hw_dic.auto_z_offset.update({'auto': True if hw_dic.auto_z_offset.type == 'z_calib+flexplate' or
                                                               hw_dic.auto_z_offset.type == 'z_calib'
                                                  else False}) %}
  {% set _dummy = hw_dic.auto_z_offset.update({'manu': True if hw_dic.auto_z_offset.type == 'z_calib+flexplate' or
                                                               hw_dic.auto_z_offset.type == 'flexplate'
                                                  else False}) %}
  # calc needed values
  {% set bed = {'min': {'x': min.x, 'y': min.y                    , 'z': 0    },
                'max': {'x': max.x, 'y': max.y - user_bed_y_offset, 'z': max.z}} %}
  {% set calc_center = {'x': (bed.max.x - bed.min.x) / 2,
                        'y': (bed.max.y - bed.min.y) / 2, 
                        'z': (bed.max.z - bed.min.z) / 2} %}
  {% set calc_park = {'min': {'x': bed.min.x + user_park_xy_delta,
                              'y': bed.min.y + user_park_xy_delta,
                              'z': bed.min.z + user_park_z_min},
                      'max': {'x': bed.max.x - user_park_xy_delta,
                              'y': bed.max.y - user_park_xy_delta,
                              'z': bed.max.z - user_park_z_max_delta}} %}
  {% set calc_z_endstop_z = cfg_endstop_z_offset|round(0, 'ceil') + 1.0 if cfg_endstop_z_offset > 0 else 1.0 %}
  {% set calc_z_hop = user_z_probe_hop if hw_dic.mag_probe.ena and user_z_probe_hop > user_z_endstop_hop
                 else user_z_endstop_hop %}
  {% set calc_brush = {'start': user_brush_x_middle - user_brush_x_width / 2,
                       'end'  : user_brush_x_middle + user_brush_x_width / 2} %}
  {% set calc_purge = {'x': (min.x + calc_brush.start) / 2 if user_brush_pos|lower == 'left'
                       else max.x - (max.x - calc_brush.end) / 2,
                       'y': max.y} %}
  {% set calc_wipe = {'start': {'x': calc_brush.start if user_brush_pos|lower == 'left'
                                else calc_brush.end,
                                'y': user_brush_y_start},
                      'end'  : {'x': calc_brush.end if user_brush_pos|lower == 'left'
                                else calc_brush.start,
                                'y': max.y}} %}
  # prepare dictonaries
  {% set homing_dic = {'z_endstop': {'x':user_z_endstop_xy[0], 'y':user_z_endstop_xy[1], 'z':calc_z_endstop_z, 'hop':user_z_endstop_hop},
                       'z_current': user_z_home_current,
                       'accel'    : user_home_accel} %}
  {% set purge_dic = {'purge' : {'x':calc_purge.x, 'y':calc_purge.y, 'z':user_z_purge},
                      'wipe'  : {'start'  : {'x': calc_wipe.start.x, 'y': calc_wipe.start.y, 'z':user_wipe_z},
                                 'end'    : {'x': calc_wipe.end.x,   'y': calc_wipe.end.y,   'z':user_wipe_z},
                                 'offset' : (calc_wipe.end.y - calc_wipe.start.y) / user_wipe_cnt,
                                 'cnt'    : user_wipe_cnt}} %}
  {% set probe_dic = {'dock'        : {'x'    : user_probe_dock_pos[0], 
                                       'y'    : user_probe_dock_pos[1] + user_probe_delta_y},
                      'store'       : {'x'    : user_probe_dock_pos[0] + user_probe_delta_x, 
                                       'y'    : user_probe_dock_pos[1]}} %}
  {% set speed_dic = {'z_hop'   : (user_z_hop_speed * 60),
                      'retract' : (user_retract_speed * 60),
                      'travel'  : (user_travel_speed * 60), 
                      'dock'    : (user_probe_dock_speed * 60),
                      'load'    : (user_filament_load_speed * 60),
                      'wipe'    : (user_wipe_speed * 60),
                      'prime'   : (user_prime_speed * 60)} %}
  {% set park_dic = {'bed'           : {'x': calc_center.x,   'y': calc_center.y,   'z': calc_park.min.z},
                     'center'        : {'x': calc_center.x,   'y': calc_center.y,   'z': calc_center.z},
                     'front'         : {'x': calc_center.x,   'y': calc_park.min.y, 'z': calc_park.max.z},
                     'frontlow'      : {'x': calc_center.x,   'y': calc_park.min.y, 'z': calc_park.min.z},
                     'rear'          : {'x': calc_park.min.x, 'y': calc_park.max.y, 'z': calc_park.max.z},
                     'pause'         : {'x': calc_purge.x,    'y': calc_purge.y,   'dz': user_park_pause_z_delta},
                     'park_at_cancel': user_park_at_cancel} %}
  {% set filament_dic = {'load_distance'   : user_load_distance,
                         'load_extrude'    : user_load_extrude,
                         'unload_distance' : user_unload_distance,
                         'retract'         : {'end'   : user_retract_end,
                                              'pause' : user_retract_pause,
                                              'cancel': user_retract_end - user_retract_pause}} %}
  {% set prime_dic = {'pos'             : {'x':user_prime_start_xy[0], 'y':user_prime_start_xy[1], 'z':user_prime_z},
                      'dir'             : user_prime_dir,
                      'spacing'         : user_prime_spacing,
                      'length_per_seg'  : user_prime_lenght / user_prime_seg,
                      'seg'             : user_prime_seg,
                      'extrude_per_seg' : user_prime_extrude_per_seg} %}
  {% set print_start_dic = {'bed_up'     : user_print_start_bed_up|float|round(1),
                            'ival'       : user_print_start_ival|int,
                            'time'       : {'extruder' : (user_print_start_extruder_time * 60)|int,
                                            'bed'      : (user_print_start_bed_time * 60)|int},
                            'prime_mult' : user_print_start_prime_mult|float} %}
  {% set respond_dic = {'z_current'    : user_respond_set_z_current, 
                        'acc'          : user_respond_set_acc, 
                        'probe_action' : user_respond_probe_action, 
                        'layer'        : user_respond_layer} %}
  {% set peripheral_dic =  {'filter'     : {'on_val'          : user_filter_on,
                                            'warning'         : user_filter_use_time,
                                            'run_after_print' : (user_fan_run_after_print * 60)},
                            'vent'      : {'on_val'          : user_vent_on,
                                           'run_after_print' : ((user_fan_run_after_print * 60) + 5)},
                            'caselight' : {'on_val' : user_caselight_on}} %}
  # store results in variable
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=hw VALUE="{hw_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=homing VALUE="{homing_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=z_hop VALUE={calc_z_hop}
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=speed VALUE="{speed_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=probe VALUE="{probe_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=park VALUE="{park_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=filament VALUE="{filament_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=purge VALUE="{purge_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=print_start VALUE="{print_start_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=unload_sd VALUE={user_unload_sd}
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=prime VALUE="{prime_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=respond VALUE="{respond_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=peripheral VALUE="{peripheral_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=run VALUE=True

## 	Thermistor Types
##   "EPCOS 100K B57560G104F"
##   "ATC Semitec 104GT-2"
##   "NTC 100K beta 3950"
##   "Honeywell 100K 135-104LAG-J01"
##   "NTC 100K MGB18-104F39050L32" (Keenovo Heater Pad)
##   "AD595"
##   "PT100 INA826"

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [cartographer model default]
#*# model_coef = 1.3726494873086537,
#*# 	  1.8093548693411294,
#*# 	  0.7117736178497693,
#*# 	  0.2628898491401855,
#*# 	  0.6199786020458595,
#*# 	  0.8263717080062504,
#*# 	  -0.6080434045175286,
#*# 	  -1.0147429398878076,
#*# 	  0.45281717516179054,
#*# 	  0.5673089483278763
#*# model_domain = 3.2225017919741853e-07,3.3624007742248025e-07
#*# model_range = 0.100000,5.000000
#*# model_temp = 53.822453
#*# model_offset = 0.03500
#*#
#*# [bed_mesh PEi-Bed_Temp-115C]
#*# version = 1
#*# points =
#*# 	0.106634, 0.103697, 0.108374, 0.108003, 0.110056, 0.114325, 0.109209, 0.105683, 0.101934, 0.098329, 0.096173, 0.093493, 0.096137, 0.092163, 0.096181, 0.096761, 0.100221, 0.107276, 0.116721, 0.124983
#*# 	0.100222, 0.095551, 0.093798, 0.095218, 0.096234, 0.095514, 0.092228, 0.089000, 0.086475, 0.081787, 0.079892, 0.080237, 0.081888, 0.080162, 0.080017, 0.081037, 0.084920, 0.089958, 0.099427, 0.109788
#*# 	0.085612, 0.086035, 0.085063, 0.086551, 0.087839, 0.086480, 0.084648, 0.079383, 0.076110, 0.069722, 0.066520, 0.066413, 0.064809, 0.065648, 0.066496, 0.073668, 0.076176, 0.079351, 0.084407, 0.098650
#*# 	0.080827, 0.078670, 0.078036, 0.078312, 0.079843, 0.080932, 0.078073, 0.074710, 0.071787, 0.065089, 0.061274, 0.063862, 0.061923, 0.061775, 0.058505, 0.061639, 0.063885, 0.066562, 0.070582, 0.080208
#*# 	0.073559, 0.070746, 0.069784, 0.072140, 0.070386, 0.069393, 0.068240, 0.064509, 0.062440, 0.056826, 0.051922, 0.053574, 0.055976, 0.051563, 0.050302, 0.054828, 0.051352, 0.054624, 0.061352, 0.073905
#*# 	0.060901, 0.056874, 0.053203, 0.056654, 0.056000, 0.055295, 0.057733, 0.057715, 0.055765, 0.049410, 0.044593, 0.041397, 0.048556, 0.043034, 0.041602, 0.042035, 0.038711, 0.041372, 0.049538, 0.060750
#*# 	0.048311, 0.046727, 0.045090, 0.047975, 0.045496, 0.047957, 0.049648, 0.050371, 0.046223, 0.039114, 0.036679, 0.033156, 0.039208, 0.032471, 0.032564, 0.029120, 0.026643, 0.029154, 0.037096, 0.049994
#*# 	0.038186, 0.036113, 0.037493, 0.038891, 0.035739, 0.038970, 0.041257, 0.040861, 0.037467, 0.032262, 0.028360, 0.026771, 0.031617, 0.024268, 0.026371, 0.023134, 0.020947, 0.023864, 0.033374, 0.043142
#*# 	0.023275, 0.021036, 0.020462, 0.021627, 0.021331, 0.024583, 0.028223, 0.028447, 0.024820, 0.019164, 0.014504, 0.014069, 0.020095, 0.012730, 0.015503, 0.015013, 0.012292, 0.012703, 0.017644, 0.033396
#*# 	0.015822, 0.014292, 0.011850, 0.012613, 0.015958, 0.019284, 0.019368, 0.019473, 0.017606, 0.009598, 0.004658, 0.005377, 0.012443, 0.006744, 0.007720, 0.005987, 0.002322, 0.002964, 0.007648, 0.017743
#*# 	0.019667, 0.017606, 0.012728, 0.011226, 0.016271, 0.020931, 0.019692, 0.017210, 0.013489, 0.004865, 0.000172, 0.001470, 0.009349, 0.003462, 0.005872, 0.001966, -0.001469, -0.001464, 0.003247, 0.015317
#*# 	0.012905, 0.012011, 0.008716, 0.007703, 0.014033, 0.018805, 0.017352, 0.016086, 0.010181, 0.002671, -0.005605, -0.001053, 0.004296, -0.000754, 0.001192, -0.002066, -0.006829, -0.005929, 0.001072, 0.010199
#*# 	0.015137, 0.013936, 0.012706, 0.015143, 0.021458, 0.024589, 0.025000, 0.020211, 0.010138, 0.003543, 0.001022, 0.004389, -0.000457, -0.003970, -0.004004, -0.009107, -0.006384, -0.000572, 0.003512, 0.017163
#*# 	0.025141, 0.023180, 0.024538, 0.024387, 0.027883, 0.034092, 0.030762, 0.025375, 0.015915, 0.013699, 0.007612, 0.011010, 0.003307, 0.003517, 0.004850, -0.000626, -0.000556, 0.003925, 0.010949, 0.019928
#*# 	0.019216, 0.030787, 0.030789, 0.030977, 0.035764, 0.037423, 0.035193, 0.031606, 0.025497, 0.024248, 0.020777, 0.013626, 0.003613, -0.002400, -0.001486, -0.004558, -0.005774, 0.000514, 0.011924, 0.023769
#*# 	0.025720, 0.024996, 0.025414, 0.025695, 0.028698, 0.029035, 0.030087, 0.028095, 0.024323, 0.025811, 0.023507, 0.016963, 0.009635, 0.003699, 0.001578, -0.001109, -0.006432, -0.003888, 0.006252, 0.017214
#*# 	0.041662, 0.038808, 0.040634, 0.042362, 0.047101, 0.045802, 0.044437, 0.042270, 0.040974, 0.040507, 0.037258, 0.029424, 0.025858, 0.023062, 0.021459, 0.019392, 0.013932, 0.016913, 0.023029, 0.035092
#*# 	0.062634, 0.062043, 0.065143, 0.064680, 0.065763, 0.064167, 0.062522, 0.062105, 0.061320, 0.060966, 0.061643, 0.050244, 0.046369, 0.043960, 0.044219, 0.039208, 0.032439, 0.032106, 0.039818, 0.049436
#*# 	0.077746, 0.074195, 0.074689, 0.073504, 0.073881, 0.072804, 0.072242, 0.071360, 0.072520, 0.072274, 0.072461, 0.057640, 0.053611, 0.051744, 0.052057, 0.048016, 0.042088, 0.044962, 0.048643, 0.058284
#*# 	0.088304, 0.081892, 0.081223, 0.077827, 0.078011, 0.077459, 0.076415, 0.073814, 0.071786, 0.070639, 0.073149, 0.061238, 0.055630, 0.053882, 0.054808, 0.049108, 0.046553, 0.050034, 0.054512, 0.063080
#*# x_count = 20
#*# y_count = 20
#*# mesh_x_pps = 2
#*# mesh_y_pps = 3
#*# algo = bicubic
#*# tension = 0.1
#*# min_x = 30.0
#*# max_x = 275.0
#*# min_y = 30.0
#*# max_y = 250.0
