[force_move]
enable_force_move: True

[include mainsail.cfg]
[mcu]
#serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_470035001951303439363932-if00
serial: /dev/ttyAMA0
restart_method: command

[idle_timeout]
timeout: 7200

[virtual_sdcard]
path: ~/printer_data/gcodes

on_error_gcode:
    SAVE_GCODE_STATE NAME=on_error_gcode
    G91
    G1 Z10 F6000
    RESTORE_GCODE_STATE NAME=on_error_gcode

[mcu rpi]
serial: /tmp/klipper_host_mcu

[pause_resume]
recover_velocity: 250

[gcode_arcs]
resolution: 0.1

[printer]
kinematics: corexy
max_velocity: 500
max_accel: 15000
max_z_velocity: 15
max_z_accel: 350
minimum_cruise_ratio: 0.5
square_corner_velocity: 10.0



[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

[temperature_sensor Spider]
sensor_type: temperature_mcu
sensor_mcu: mcu
min_temp: 10
max_temp: 80


[scanner]
#serial:
#   Path to the serial port for the idm device. Typically has the form
#   /dev/serial/by-id/usb-idm_idm_...
canbus_uuid: 8a22f28f0a1e
#adjust to suit your scanner 
#serial: /dev/serial/by-id/usb-cartographer_cartographer_
x_offset: 0                          
#adjust for your offset
y_offset: 21.953                        
#adjust for your offset
calibration_method: touch 
sensor: cartographer
sensor_alt: carto
#alternate name to call commands. CARTO_TOUCH etc
scanner_touch_z_offset: 0.05         
#this is the default and will be overwritten and added to the DO NOT SAVE area by using UI to save z offset
mesh_runs: 2


[adxl345]
cs_pin: scanner:PA3
spi_bus: spi1

[resonance_tester]
accel_chip: adxl345
probe_points:
    150, 150, 20

[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}

[exclude_object]

[respond]

[shaketune]
result_folder: ~/printer_data/config/ShakeTune_results
#    The folder where the results will be stored. It will be created if it doesn't exist.
number_of_results_to_keep: 3
#    The number of results to keep in the result_folder. The oldest results will
#    be automatically deleted after each runs.
keep_raw_csv: False
#    If True, the raw CSV files will be kept in the result_folder alongside the
#    PNG graphs. If False, they will be deleted and only the graphs will be kept.
show_macros_in_webui: True
#    Mainsail and Fluidd doesn't create buttons for "system" macros that are not in the
#    printer.cfg file. If you want to see the macros in the webui, set this to True.
timeout: 300
#    The maximum time in seconds to let Shake&Tune process the CSV files and generate the graphs.
  

#####################################################################
#  Stepper Settings
#####################################################################
[include stepper.cfg]
[include tmc.cfg]
[include ebb36_config.cfg]
[include autotune.cfg]


#####################################################################
#  Extruder & Bed; Heater Verification (default values)
#####################################################################
[include heater.cfg]
#[include heater_verify.cfg]

#####################################################################
#  Probe and Gantry Adjustment Routines
#####################################################################
[include probe_qgl.cfg]

#####################################################################
#  Fan Control & Extra Thermistor
#####################################################################
[include fan.cfg]

#####################################################################
#  Caselight Control
#####################################################################
#[include caselight.cfg]

#####################################################################
#  Homing Routines
#####################################################################
[include homing.cfg]
   
#####################################################################
#  Bed Mesh 
#####################################################################
[include bed_mesh.cfg]

######################################################################
#  Resonance compensation
######################################################################
[include input_shaper.cfg]

#####################################################################
#   Display & Custom Menu
#####################################################################
#[include lcd.cfg]
#[include display_menu.cfg]

#####################################################################
#  Macros
#####################################################################
[include basic_macro.cfg]
[include macro.cfg]
[include park_macro.cfg]
[include debug_macro.cfg]

#####################################################################
#  moonraker/mainsail
##################################################################### 
[include webclient.cfg]

#####################################################################
# Power relays
##################################################################### 
#[include power.cfg]

#####################################################################
#  print and service time storage
##################################################################### 
[include printtime.cfg]

#####################################################################
#  probe accuracy test
#####################################################################
#[include test_probe_accuracy.cfg]

#####################################################################
#  flexplate select menu
#####################################################################
#[include flexplate.cfg]

#####################################################################
#  filament and pressure advance
#####################################################################
[include filament.cfg]
[include pressure_advance.cfg]

#####################################################################
#  filament runout sensor
#####################################################################
#[include runout.cfg]

#####################################################################
#  force move used only if gantry is at z max
#####################################################################
#[include force_move.cfg]

#####################################################################
#  MagProbe instead of Sensor
#####################################################################
#[include magprobe.cfg]
#[include euclid.cfg]

#####################################################################
#  Z_calibration needs <https://github.com/protoloft/klipper_z_calibration>
#####################################################################
#[include z_calibration.cfg]

#####################################################################
#  timelaps needs <https://github.com/mainsail-crew/moonraker-timelapse.git>
#####################################################################
#[include timelapse.cfg]

#####################################################################
#  Enable Execute Object (beta)
#####################################################################
[exclude_object]

#####################################################################
#  File location of stored varibales
######################################################################
[save_variables]
filename: /home/pi/printer_data/config/.variables.stb

#####################################################################
#  Virtual SD Card
#####################################################################
[virtual_sdcard]
path: /home/pi/printer_data/gcodes


[include K-ShakeTune/*.cfg]


#[EXCLUDE_OBJECT]
#[EXCLUDE_OBJECT_DEFINE]
#[EXCLUDE_OBJECT_START]
#[EXCLUDE_OBJECT_END]

#  macro that run at klipper start
[delayed_gcode _INIT]
initial_duration: 1
gcode:
  _USER_VARIABLE
  _CHECK_CONSITENT
  _EXECUTE_AT_INIT

#  macro that run at klipper start
[delayed_gcode _INIT]
initial_duration: 1
gcode:
  _USER_VARIABLE
  _CHECK_CONSITENT
  _EXECUTE_AT_INIT

[gcode_macro _EXECUTE_AT_INIT]
description: Helper: Everything that should run at klipper start
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  {% if 'gcode_macro _MENU_LIMITS' is in printer %} _MENU_LIMITS INDEX=4 {% endif %}
  {% if printer.save_variables.variables.filament_sensor %} _RESTORE_FILAMENT_SENSOR {% endif %}
  {% if user.hw.filter.ena %} _CHECK_FILTER {% endif %}
  {% if user.hw.relay.ena %} _HEATER_ON {% endif %}
  {% if user.hw.display.ena %} UPDATE_DELAYED_GCODE ID=_DISPLAY_INIT DURATION=2 {% endif %}
  _PRINT_AR T="Klipper INIT done"

[gcode_macro _CHECK_CONSITENT]
description: Helper: Check that some criterias are meet in the printer.cfg
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  {% set text = ["CONFIG: ERROR"] %}
  {% if user.run is not defined %}
    {% set _dummy = text.append("_USER_VARIABLE macro missing") %}
  {% elif not user.run %}
    {% set _dummy = text.append("_USER_VARIABLE macro not executed") %}
  {% endif %}
  {% if user.hw.auto_z_offset.auto and not user.hw.mag_probe.ena %}
    {% set _dummy = text.append("[z_calibration] defined but no MagProbe\n") %}
  {% endif %}
  {% if 'save_variables' not in printer %}
    {% set _dummy = text.append("[save_variables] missing") %}
  {% endif %}
  {% if 'virtual_sdcard' not in printer %}
    {% set _dummy = text.append("[virtual_sdcard] missing") %}
  {% endif %}
  {% if text|length > 1 %}
    {action_respond_info(text|join("\n"))}
  {% endif %}

[gcode_macro _USER_VARIABLE]
description: Helper: Contains User defined printer variables
##### see the readme for the variable definition #####
variable_hw: {}
variable_homing: {}
variable_z_hop: 0
variable_speed: {}   
variable_probe: {}
variable_park: {}
variable_filament: {}
variable_purge: {}
variable_print_start: {}
variable_unload_sd: False
variable_prime: {}
variable_respond: {}
variable_peripheral: {}
variable_run: False
gcode:
    ###################################################################
  ##                     start of user defines                     ## 
  ## this needs to be changed for your printer                     ##
  ###################################################################
  {% set user_z_endstop_xy = [150,150] %}  ; z Endstop position insight right profil
  #{% set user_z_endstop_xy = [123.0,355.0] %}  ; z Endstop position insight left profil
  {% set user_z_endstop_hop = 7.5 %}           ; z hop for moves e.g homimg
  {% set user_z_home_current = 0.3 %}          ; reduced homing curent for z
  {% set user_home_accel = 1200 %}             ; reduced ACCEL for homing
  {% set user_bed_y_offset = 5 %}              ; Endstop offset to bed max y
  ##### all user defined speeds [mm/sec] #####
  {% set user_z_hop_speed = 15 %}              ; default z_hop speed
  {% set user_retract_speed = 30 %}            ; default retract/extrude speed
  {% set user_travel_speed = 300 %}            ; travel speed e.g park, dock ...
  {% set user_probe_dock_speed = 50 %}         ; dock speed for attach/dock
  {% set user_filament_load_speed = 50 %}      ; load/unload speed
  {% set user_wipe_speed = 70 %}               ; wipe move speed 
  {% set user_prime_speed = 25 %}              ; prime line speed  
  ##### Mag Probe #####
  {% set user_probe_dock_pos = [22,295] %}      ; position of the dock 
  {% set user_probe_delta_x = 22 %}            ; x offset for position before dock
  {% set user_probe_delta_y = -30 %}           ; y offset to move probe out of dock
  {% set user_z_probe_hop = 15.5 %}            ; z minimum heigh to avoid crash vorher15.5
  ##### Park Position #####
  {% set user_park_xy_delta = 80 %}            ; distance for x or y from the edge
  {% set user_park_z_max_delta = 40 %}         ; insure to do not hit cam in front
  {% set user_park_z_min = 30 %}               ; minimal z from bed
  {% set user_park_pause_z_delta = 2.0 %}      ; distance to increase head while PAUSE/CANCEL_PRINT
  {% set user_park_at_cancel = False %}        ; park head at CANCEL_PRINT if not paused [False/True]
  ##### Filament #####
  {% set user_extruder_min_add = 30 %}         ; Temperature add to min Extruder temp
  {% set user_load_distance = 90 %}            ; load distance while load filament
  {% set user_load_extrude = 50 %}             ; extrude distance while load filament
  {% set user_unload_distance = 75 %}          ; unload distance while unload filament
  {% set user_retract_end = 2 %}               ; retract distance at PRINT_END or CANCEL_PRINT
  {% set user_retract_pause = 1 %}             ; retract/extrude distance while PAUSE or RESUME
  ##### Purge & Brush #####
  {% set user_brush_pos = 'right' %}           ; left/right profile used
  {% set user__brush_x_middle = 252 %}        ; mid point of brush at left profile
  {% set user_brush_x_middle = 252 %}          ; mid point of brush at right profil
  {% set user_brush_x_width = 50 %}            ; width of brush
  {% set user_brush_y_start = 305 %}           ; start point at y
  {% set user_wipe_z = 5.0 %}                  ; z for wipe moves
  {% set user_wipe_cnt = 5 %}                  ; number of full wipes
  {% set user_z_purge = 2.5 %}                 ; z above purge bucket
  ##### PRINT_START/STOP #####
  {% set user_print_start_bed_up = 10 %}       ; bed temp raise for faster heat soak
  {% set user_print_start_ival = 1 %}          ; wait time per call in sec
  {% set user_print_start_extruder_time = 3 %} ; time in minutes before soak end to start extruder heating 
  {% set user_print_start_bed_time = 3 %}      ; time in minutes before soak end to set bed target temp
  {% set user_print_start_prime_mult = 2 %}    ; multiplier for prime line hight 
  {% set user_unload_sd = True %}              ; unload sd file at PRINT_END or CANCEL_PRINT [True,False]
  ##### Prime Line #####
  {% set user_prime_start_xy = [7.0,30.0] %}   ; x&y start coordinates of prime line
  {% set user_prime_z = 0.34 %}                ; default prime layer hight
  {% set user_prime_dir = 'Y+' %}              ; direction of prime line (X+, X-, Y+, Y-)
  {% set user_prime_spacing = 0.4 %}           ; distance between line, move will allways positive
  {% set user_prime_lenght = 220 %}            ; length of prime line
  {% set user_prime_seg = 11 %}                ; segments in that the prime line is splitted
  {% set user_prime_extrude_per_seg = 2 %}     ; amount of filament extruded per segment
  ##### Respond defaults #####
  # Default behaivior for output messages of the macro 0: no output 1: console output
  {% set user_respond_set_z_current = 0 %}     ; Macro: _SET_Z_CURRENT
  {% set user_respond_set_acc = 0 %}           ; Macro: _SET_ACC
  {% set user_respond_probe_action = 1 %}      ; Macro: _PROBE_ACTION
  {% set user_respond_layer = 0 %}             ; Macro: _LAYER
  ##### Peripheral #####
  {% set user_filter_on = 0.5 %}               ; filter on value
  {% set user_filter_use_time = 80 %}          ; Nevermore change warning limit 
  {% set user_vent_on = 15 %}                  ; chamber fan on temperature                        
  {% set user_caselight_on = 0.4 %}            ; caselight on value
  {% set user_fan_run_after_print = 30 %}      ; time in min to run filter and chamber exhaust after print finsih 
  ###################################################################
  ##                      end of user defines                      ## 
  ###################################################################
  # get printer limits & cfg value
  {% set min = printer.toolhead.axis_minimum %}
  {% set max = printer.toolhead.axis_maximum %}
  {% set cfg_endstop_z_offset = printer.configfile.settings.stepper_z.position_endstop|default(0.0)|float %}
  # detect additional hardware
  {% set hw_dic = {'display'       : {'ena' : True if 'neopixel neo_display' in printer.configfile.settings 
                                         else False},
                   'chamber'       : {'type': 'sensor' if 'temperature_sensor chamber' in printer.configfile.settings
                                         else 'fan'    if 'temperature_fan chamber' in printer.configfile.settings 
                                         else 'none'},
                   'caselight'     : {'ena' : True if 'output_pin caselight' in printer.configfile.settings 
                                         else False},
                   'filter'        : {'ena' : True if 'fan_generic filter' in printer.configfile.settings 
                                         else False},
                   'runout'        : {'type': 'switch' if 'filament_switch_sensor runout' in printer.configfile.settings
                                         else 'motion' if 'filament_motion_sensor runout' in printer.configfile.settings
                                         else 'file'   if 'save_variables' in printer and filament_loaded in printer.save_variables.variables 
                                         else 'none'},
                   'relay'         : {'ena' : True if 'output_pin extruder_relay'   in printer.configfile.settings and
                                                      'output_pin heater_bed_relay' in printer.configfile.settings 
                                         else False},
                   'auto_z_offset' : {'type': 'z_calib+flexplate' if 'z_calibration' in printer and 'save_variables' in printer and 'plates' in printer.save_variables.variables
                                         else 'z_calib'           if 'z_calibration' in printer
                                         else 'flexplate'         if 'save_variables' in printer and 'plates' in printer.save_variables.variables 
                                         else 'none'},
                   'mag_probe'     : {'ena' : True if printer['gcode_macro _MAG_PROBE'] is defined or 'dockable_probe' in printer 
                                         else False},
                   'endstop_temp'  : {'ena' : True if 'temperature_sensor endstop' in printer.configfile.settings 
                                         else False}}%}
  {% set _dummy = hw_dic.chamber.update({'ena': True if hw_dic.chamber.type != 'none' else False}) %}
  {% set _dummy = hw_dic.chamber.update({'fan': True if hw_dic.chamber.type == 'fan' else False}) %}
  {% set _dummy = hw_dic.runout.update({'ena': True if hw_dic.runout.type != 'none' else False}) %}
  {% set _dummy = hw_dic.runout.update({'sensor': True if hw_dic.runout.type == 'switch' or hw_dic.runout.type == 'motion'
                                             else False}) %}
  {% set _dummy = hw_dic.auto_z_offset.update({'ena': True if hw_dic.auto_z_offset.type != 'none' else False}) %}
  {% set _dummy = hw_dic.auto_z_offset.update({'auto': True if hw_dic.auto_z_offset.type == 'z_calib+flexplate' or
                                                               hw_dic.auto_z_offset.type == 'z_calib'
                                                  else False}) %}
  {% set _dummy = hw_dic.auto_z_offset.update({'manu': True if hw_dic.auto_z_offset.type == 'z_calib+flexplate' or
                                                               hw_dic.auto_z_offset.type == 'flexplate'
                                                  else False}) %}
  # calc needed values
  {% set bed = {'min': {'x': min.x, 'y': min.y                    , 'z': 0    },
                'max': {'x': max.x, 'y': max.y - user_bed_y_offset, 'z': max.z}} %}
  {% set calc_center = {'x': (bed.max.x - bed.min.x) / 2,
                        'y': (bed.max.y - bed.min.y) / 2, 
                        'z': (bed.max.z - bed.min.z) / 2} %}
  {% set calc_park = {'min': {'x': bed.min.x + user_park_xy_delta,
                              'y': bed.min.y + user_park_xy_delta,
                              'z': bed.min.z + user_park_z_min},
                      'max': {'x': bed.max.x - user_park_xy_delta,
                              'y': bed.max.y - user_park_xy_delta,
                              'z': bed.max.z - user_park_z_max_delta}} %}
  {% set calc_z_endstop_z = cfg_endstop_z_offset|round(0, 'ceil') + 1.0 if cfg_endstop_z_offset > 0 else 1.0 %}
  {% set calc_z_hop = user_z_probe_hop if hw_dic.mag_probe.ena and user_z_probe_hop > user_z_endstop_hop
                 else user_z_endstop_hop %}
  {% set calc_brush = {'start': user_brush_x_middle - user_brush_x_width / 2,
                       'end'  : user_brush_x_middle + user_brush_x_width / 2} %}
  {% set calc_purge = {'x': (min.x + calc_brush.start) / 2 if user_brush_pos|lower == 'left'
                       else max.x - (max.x - calc_brush.end) / 2,
                       'y': max.y} %}
  {% set calc_wipe = {'start': {'x': calc_brush.start if user_brush_pos|lower == 'left'
                                else calc_brush.end,
                                'y': user_brush_y_start},
                      'end'  : {'x': calc_brush.end if user_brush_pos|lower == 'left'
                                else calc_brush.start,
                                'y': max.y}} %}
  # prepare dictonaries
  {% set homing_dic = {'z_endstop': {'x':user_z_endstop_xy[0], 'y':user_z_endstop_xy[1], 'z':calc_z_endstop_z, 'hop':user_z_endstop_hop},
                       'z_current': user_z_home_current,
                       'accel'    : user_home_accel} %}
  {% set purge_dic = {'purge' : {'x':calc_purge.x, 'y':calc_purge.y, 'z':user_z_purge},
                      'wipe'  : {'start'  : {'x': calc_wipe.start.x, 'y': calc_wipe.start.y, 'z':user_wipe_z},
                                 'end'    : {'x': calc_wipe.end.x,   'y': calc_wipe.end.y,   'z':user_wipe_z},
                                 'offset' : (calc_wipe.end.y - calc_wipe.start.y) / user_wipe_cnt,
                                 'cnt'    : user_wipe_cnt}} %}
  {% set probe_dic = {'dock'        : {'x'    : user_probe_dock_pos[0], 
                                       'y'    : user_probe_dock_pos[1] + user_probe_delta_y},
                      'store'       : {'x'    : user_probe_dock_pos[0] + user_probe_delta_x, 
                                       'y'    : user_probe_dock_pos[1]}} %}
  {% set speed_dic = {'z_hop'   : (user_z_hop_speed * 60),
                      'retract' : (user_retract_speed * 60),
                      'travel'  : (user_travel_speed * 60), 
                      'dock'    : (user_probe_dock_speed * 60),
                      'load'    : (user_filament_load_speed * 60),
                      'wipe'    : (user_wipe_speed * 60),
                      'prime'   : (user_prime_speed * 60)} %}
  {% set park_dic = {'bed'           : {'x': calc_center.x,   'y': calc_center.y,   'z': calc_park.min.z},
                     'center'        : {'x': calc_center.x,   'y': calc_center.y,   'z': calc_center.z},
                     'front'         : {'x': calc_center.x,   'y': calc_park.min.y, 'z': calc_park.max.z},
                     'frontlow'      : {'x': calc_center.x,   'y': calc_park.min.y, 'z': calc_park.min.z},
                     'rear'          : {'x': calc_park.min.x, 'y': calc_park.max.y, 'z': calc_park.max.z},
                     'pause'         : {'x': calc_purge.x,    'y': calc_purge.y,   'dz': user_park_pause_z_delta},
                     'park_at_cancel': user_park_at_cancel} %}
  {% set filament_dic = {'load_distance'   : user_load_distance,
                         'load_extrude'    : user_load_extrude,
                         'unload_distance' : user_unload_distance,
                         'retract'         : {'end'   : user_retract_end,
                                              'pause' : user_retract_pause,
                                              'cancel': user_retract_end - user_retract_pause}} %}
  {% set prime_dic = {'pos'             : {'x':user_prime_start_xy[0], 'y':user_prime_start_xy[1], 'z':user_prime_z},
                      'dir'             : user_prime_dir,
                      'spacing'         : user_prime_spacing,
                      'length_per_seg'  : user_prime_lenght / user_prime_seg,
                      'seg'             : user_prime_seg,
                      'extrude_per_seg' : user_prime_extrude_per_seg} %}
  {% set print_start_dic = {'bed_up'     : user_print_start_bed_up|float|round(1),
                            'ival'       : user_print_start_ival|int,
                            'time'       : {'extruder' : (user_print_start_extruder_time * 60)|int,
                                            'bed'      : (user_print_start_bed_time * 60)|int},
                            'prime_mult' : user_print_start_prime_mult|float} %}
  {% set respond_dic = {'z_current'    : user_respond_set_z_current, 
                        'acc'          : user_respond_set_acc, 
                        'probe_action' : user_respond_probe_action, 
                        'layer'        : user_respond_layer} %}
  {% set peripheral_dic =  {'filter'     : {'on_val'          : user_filter_on,
                                            'warning'         : user_filter_use_time,
                                            'run_after_print' : (user_fan_run_after_print * 60)},
                            'vent'      : {'on_val'          : user_vent_on,
                                           'run_after_print' : ((user_fan_run_after_print * 60) + 5)},
                            'caselight' : {'on_val' : user_caselight_on}} %}
  # store results in variable
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=hw VALUE="{hw_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=homing VALUE="{homing_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=z_hop VALUE={calc_z_hop}
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=speed VALUE="{speed_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=probe VALUE="{probe_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=park VALUE="{park_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=filament VALUE="{filament_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=purge VALUE="{purge_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=print_start VALUE="{print_start_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=unload_sd VALUE={user_unload_sd}
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=prime VALUE="{prime_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=respond VALUE="{respond_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=peripheral VALUE="{peripheral_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=run VALUE=True

## 	Thermistor Types
##   "EPCOS 100K B57560G104F"
##   "ATC Semitec 104GT-2"
##   "NTC 100K beta 3950"
##   "Honeywell 100K 135-104LAG-J01"
##   "NTC 100K MGB18-104F39050L32" (Keenovo Heater Pad)
##   "AD595"
##   "PT100 INA826"

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [bed_mesh PEi-Bed_Temp-115C]
#*# version = 1
#*# points =
#*# 	0.061661, 0.050796, 0.045161, 0.039650, 0.037400, 0.031300, 0.035818, 0.033856, 0.038758, 0.028017, 0.026527, 0.019438, 0.019942, 0.031375, 0.027057, 0.039171, 0.032716, 0.036836, 0.031181, 0.043645, 0.046807, 0.046045, 0.046126, 0.050664, 0.065725
#*# 	0.055481, 0.049911, 0.042479, 0.040287, 0.029176, 0.034645, 0.036641, 0.043893, 0.040295, 0.034349, 0.028637, 0.021219, 0.021913, 0.018028, 0.024242, 0.030068, 0.037509, 0.038328, 0.042257, 0.046146, 0.047781, 0.045747, 0.044853, 0.051903, 0.057505
#*# 	0.053398, 0.050575, 0.046738, 0.041902, 0.032909, 0.032931, 0.034731, 0.039708, 0.039769, 0.036567, 0.032991, 0.027092, 0.026721, 0.021665, 0.027877, 0.026164, 0.030344, 0.035214, 0.037887, 0.044543, 0.046267, 0.046102, 0.048232, 0.053707, 0.057782
#*# 	0.051148, 0.051275, 0.049111, 0.043853, 0.037377, 0.036082, 0.038997, 0.041078, 0.040064, 0.038764, 0.031179, 0.030096, 0.028871, 0.028792, 0.028918, 0.036229, 0.036864, 0.038651, 0.039027, 0.044588, 0.046929, 0.047857, 0.050492, 0.052687, 0.060968
#*# 	0.054161, 0.050668, 0.050694, 0.043719, 0.040534, 0.037708, 0.039726, 0.042308, 0.040188, 0.042103, 0.035655, 0.034024, 0.032058, 0.033356, 0.034536, 0.035552, 0.036129, 0.033796, 0.038960, 0.044345, 0.047173, 0.046793, 0.051244, 0.053435, 0.061722
#*# 	0.049218, 0.044777, 0.042368, 0.039202, 0.037111, 0.032350, 0.038782, 0.041104, 0.042002, 0.041284, 0.038944, 0.035271, 0.032013, 0.034123, 0.035326, 0.034927, 0.035727, 0.035623, 0.041611, 0.047346, 0.049238, 0.047398, 0.046956, 0.051137, 0.057401
#*# 	0.043447, 0.037542, 0.037256, 0.030274, 0.031719, 0.027085, 0.034876, 0.031899, 0.039530, 0.035329, 0.035015, 0.030395, 0.025681, 0.028797, 0.025783, 0.029221, 0.029901, 0.032230, 0.036626, 0.042154, 0.046661, 0.042981, 0.043340, 0.044065, 0.056081
#*# 	0.037827, 0.034393, 0.036244, 0.030258, 0.028440, 0.029777, 0.033177, 0.033608, 0.034375, 0.033366, 0.031629, 0.025604, 0.026771, 0.024851, 0.023860, 0.023824, 0.028660, 0.028560, 0.033575, 0.036771, 0.043005, 0.041665, 0.041620, 0.047616, 0.049289
#*# 	0.030682, 0.027940, 0.025300, 0.024899, 0.023962, 0.023377, 0.026831, 0.025937, 0.028676, 0.025727, 0.020542, 0.017403, 0.017420, 0.018951, 0.019153, 0.020825, 0.027286, 0.027060, 0.027730, 0.034871, 0.039251, 0.034437, 0.038967, 0.039048, 0.046860
#*# 	0.018264, 0.014587, 0.015809, 0.017536, 0.016719, 0.014852, 0.016150, 0.018751, 0.014247, 0.016882, 0.015098, 0.010064, 0.014571, 0.010549, 0.016213, 0.011750, 0.022121, 0.020161, 0.027642, 0.028976, 0.038077, 0.030981, 0.032222, 0.037722, 0.041430
#*# 	0.008851, 0.010358, 0.007360, 0.014976, 0.012664, 0.009745, 0.017016, 0.017168, 0.018801, 0.007944, 0.011386, 0.002904, 0.011753, 0.003561, 0.016019, 0.013077, 0.022320, 0.021146, 0.023834, 0.028787, 0.028940, 0.026864, 0.028891, 0.031596, 0.040115
#*# 	0.010409, 0.020828, 0.009321, 0.018520, 0.010410, 0.011114, 0.014284, 0.017597, 0.019258, 0.007689, 0.013074, 0.002433, 0.011438, 0.005939, 0.011422, 0.014340, 0.019676, 0.022982, 0.020535, 0.033144, 0.026857, 0.034453, 0.023788, 0.033685, 0.033166
#*# 	0.016668, 0.016954, 0.013205, 0.011182, 0.009982, 0.014436, 0.006069, 0.017988, 0.006027, 0.014481, 0.002776, 0.005228, 0.001273, 0.009188, 0.011061, 0.012566, 0.017584, 0.022296, 0.025276, 0.028362, 0.023690, 0.028918, 0.029420, 0.031711, 0.034465
#*# 	0.005713, 0.009833, 0.006138, 0.004226, 0.011432, 0.002650, 0.011181, 0.006363, 0.004729, -0.000561, 0.001327, -0.006722, 0.000010, 0.002259, 0.002038, 0.010237, 0.009864, 0.017968, 0.019741, 0.022175, 0.020043, 0.022427, 0.022379, 0.023872, 0.026179
#*# 	0.014554, 0.005535, 0.008325, 0.002258, 0.003163, 0.003510, 0.000413, 0.003218, -0.000666, 0.002830, -0.002911, 0.000219, -0.003363, 0.004072, 0.002891, 0.005989, 0.006253, 0.010209, 0.015452, 0.014066, 0.020389, 0.018586, 0.018029, 0.019142, 0.021516
#*# 	0.014773, 0.008444, 0.007224, 0.007054, 0.005488, 0.005260, 0.007137, 0.013924, 0.009602, 0.003942, -0.005255, -0.002512, -0.005490, -0.000371, 0.004854, 0.007047, 0.007975, 0.010628, 0.020871, 0.021595, 0.021357, 0.020073, 0.019191, 0.020593, 0.021880
#*# 	0.016406, 0.008985, 0.008799, 0.010689, 0.008854, 0.004071, 0.012479, 0.012494, 0.010975, 0.005991, 0.003652, 0.002399, 0.001910, -0.000109, 0.004139, 0.007190, 0.001194, 0.009358, 0.016419, 0.019613, 0.019948, 0.026581, 0.018694, 0.020596, 0.023735
#*# 	0.011151, 0.010591, 0.004341, 0.004972, 0.002444, 0.008110, 0.009817, 0.007182, 0.005712, 0.003508, 0.002630, -0.001807, -0.000980, -0.002468, 0.001242, -0.002332, 0.002545, 0.005976, 0.010625, 0.014126, 0.013320, 0.018364, 0.012081, 0.015233, 0.019489
#*# 	0.009506, 0.005662, -0.001875, 0.003253, 0.007340, 0.007963, 0.007026, 0.009060, 0.003920, 0.001613, -0.003963, -0.005689, -0.004689, -0.005805, -0.003381, -0.001818, -0.000188, 0.003545, 0.007344, 0.007967, 0.005650, 0.010849, 0.002141, 0.009087, 0.007287
#*# 	0.013672, 0.016780, 0.011384, 0.018149, 0.016814, 0.015925, 0.014876, 0.008958, 0.012640, 0.005319, 0.011514, 0.002624, 0.007899, 0.003299, 0.009108, 0.008160, 0.009998, 0.013396, 0.009157, 0.019269, 0.015244, 0.021917, 0.010321, 0.019905, 0.018861
#*# 	0.025264, 0.023727, 0.022895, 0.026475, 0.024187, 0.026586, 0.018600, 0.027601, 0.018539, 0.021899, 0.014951, 0.019059, 0.014384, 0.016175, 0.021349, 0.017953, 0.023799, 0.015299, 0.027760, 0.017348, 0.025778, 0.016949, 0.022701, 0.023727, 0.026731
#*# 	0.036428, 0.031279, 0.037279, 0.032726, 0.037416, 0.027809, 0.034102, 0.030677, 0.029772, 0.028050, 0.026375, 0.028960, 0.019096, 0.026068, 0.021528, 0.026650, 0.024370, 0.028372, 0.026405, 0.029024, 0.030801, 0.023356, 0.029307, 0.024867, 0.034138
#*# 	0.040336, 0.038807, 0.040341, 0.034048, 0.037182, 0.031016, 0.037226, 0.031432, 0.033627, 0.031190, 0.031030, 0.030933, 0.023989, 0.029402, 0.024269, 0.025250, 0.023590, 0.028770, 0.020063, 0.026421, 0.026221, 0.027402, 0.023078, 0.025748, 0.029894
#*# 	0.040933, 0.037970, 0.036358, 0.036849, 0.035773, 0.032630, 0.035983, 0.035787, 0.035898, 0.033636, 0.031330, 0.025957, 0.023891, 0.025677, 0.021555, 0.020782, 0.021473, 0.022860, 0.019994, 0.021934, 0.025002, 0.023961, 0.020668, 0.022393, 0.025060
#*# 	0.049576, 0.044496, 0.043891, 0.044869, 0.045316, 0.042677, 0.043274, 0.043604, 0.043111, 0.040932, 0.035162, 0.030728, 0.027890, 0.031337, 0.029455, 0.026511, 0.026895, 0.025284, 0.026626, 0.027463, 0.030780, 0.026544, 0.026085, 0.026204, 0.029099
#*# x_count = 25
#*# y_count = 25
#*# mesh_x_pps = 0
#*# mesh_y_pps = 0
#*# algo = direct
#*# tension = 0.1
#*# min_x = 30.0
#*# max_x = 270.0
#*# min_y = 30.0
#*# max_y = 250.0
#*#
#*# [scanner model default]
#*# model_coef = 1.3805475377064285,
#*# 	  1.8077330162558989,
#*# 	  0.7386825716659878,
#*# 	  0.372608578689805,
#*# 	  0.48386865281030883,
#*# 	  0.3582088567071338,
#*# 	  -0.3906337865234134,
#*# 	  -0.31277787769363447,
#*# 	  0.33685439344334733,
#*# 	  0.22498332292991774
#*# model_domain = 3.1830622496514186e-07,3.318020637417374e-07
#*# model_range = 0.100000,5.000000
#*# model_temp = 28.275495
#*# model_offset = 0.00000
#*#
#*# [scanner]
#*# scanner_touch_threshold = 2500
