[force_move]
enable_force_move: True

[include mainsail.cfg]
[mcu]
#serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_470035001951303439363932-if00
serial: /dev/ttyAMA0
restart_method: command

[idle_timeout]
timeout: 7200

[virtual_sdcard]
path: ~/printer_data/gcodes

on_error_gcode:
    SAVE_GCODE_STATE NAME=on_error_gcode
    G91
    G1 Z10 F6000
    RESTORE_GCODE_STATE NAME=on_error_gcode

[mcu rpi]
serial: /tmp/klipper_host_mcu

[pause_resume]
recover_velocity: 250

[gcode_arcs]
resolution: 0.1

[printer]
kinematics: corexy
max_velocity: 500
max_accel: 15000
max_z_velocity: 15
max_z_accel: 350
minimum_cruise_ratio: 0.5
square_corner_velocity: 10.0



[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

[temperature_sensor Spider]
sensor_type: temperature_mcu
sensor_mcu: mcu
min_temp: 10
max_temp: 80


[scanner]
#serial:
#   Path to the serial port for the idm device. Typically has the form
#   /dev/serial/by-id/usb-idm_idm_...
canbus_uuid: 8a22f28f0a1e
#adjust to suit your scanner 
#serial: /dev/serial/by-id/usb-cartographer_cartographer_
x_offset: 0                          
#adjust for your offset
y_offset: 21.953                        
#adjust for your offset
calibration_method: touch 
sensor: cartographer
sensor_alt: carto
#alternate name to call commands. CARTO_TOUCH etc
#scanner_touch_z_offset: 0.05         
#this is the default and will be overwritten and added to the DO NOT SAVE area by using UI to save z offset
mesh_runs: 2


[adxl345]
cs_pin: scanner:PA3
spi_bus: spi1

[resonance_tester]
accel_chip: adxl345
probe_points:
    150, 150, 20

[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}

[exclude_object]

[respond]

[shaketune]
result_folder: ~/printer_data/config/ShakeTune_results
#    The folder where the results will be stored. It will be created if it doesn't exist.
number_of_results_to_keep: 3
#    The number of results to keep in the result_folder. The oldest results will
#    be automatically deleted after each runs.
keep_raw_csv: False
#    If True, the raw CSV files will be kept in the result_folder alongside the
#    PNG graphs. If False, they will be deleted and only the graphs will be kept.
show_macros_in_webui: True
#    Mainsail and Fluidd doesn't create buttons for "system" macros that are not in the
#    printer.cfg file. If you want to see the macros in the webui, set this to True.
timeout: 300
#    The maximum time in seconds to let Shake&Tune process the CSV files and generate the graphs.
  

#####################################################################
#  Stepper Settings
#####################################################################
[include stepper.cfg]
[include tmc.cfg]
[include ebb36_config.cfg]
[include autotune.cfg]


#####################################################################
#  Extruder & Bed; Heater Verification (default values)
#####################################################################
[include heater.cfg]
#[include heater_verify.cfg]

#####################################################################
#  Probe and Gantry Adjustment Routines
#####################################################################
[include probe_qgl.cfg]

#####################################################################
#  Fan Control & Extra Thermistor
#####################################################################
[include fan.cfg]

#####################################################################
#  Caselight Control
#####################################################################
#[include caselight.cfg]

#####################################################################
#  Homing Routines
#####################################################################
[include homing.cfg]
   
#####################################################################
#  Bed Mesh 
#####################################################################
[include bed_mesh.cfg]

######################################################################
#  Resonance compensation
######################################################################
[include input_shaper.cfg]

#####################################################################
#   Display & Custom Menu
#####################################################################
#[include lcd.cfg]
#[include display_menu.cfg]

#####################################################################
#  Macros
#####################################################################
[include basic_macro.cfg]
[include macro.cfg]
[include park_macro.cfg]
[include debug_macro.cfg]

#####################################################################
#  moonraker/mainsail
##################################################################### 
[include webclient.cfg]

#####################################################################
# Power relays
##################################################################### 
#[include power.cfg]

#####################################################################
#  print and service time storage
##################################################################### 
[include printtime.cfg]

#####################################################################
#  probe accuracy test
#####################################################################
#[include test_probe_accuracy.cfg]

#####################################################################
#  flexplate select menu
#####################################################################
#[include flexplate.cfg]

#####################################################################
#  filament and pressure advance
#####################################################################
[include filament.cfg]
[include pressure_advance.cfg]

#####################################################################
#  filament runout sensor
#####################################################################
#[include runout.cfg]

#####################################################################
#  force move used only if gantry is at z max
#####################################################################
#[include force_move.cfg]

#####################################################################
#  MagProbe instead of Sensor
#####################################################################
#[include magprobe.cfg]
#[include euclid.cfg]

#####################################################################
#  Z_calibration needs <https://github.com/protoloft/klipper_z_calibration>
#####################################################################
#[include z_calibration.cfg]

#####################################################################
#  timelaps needs <https://github.com/mainsail-crew/moonraker-timelapse.git>
#####################################################################
#[include timelapse.cfg]

#####################################################################
#  Enable Execute Object (beta)
#####################################################################
[exclude_object]

#####################################################################
#  File location of stored varibales
######################################################################
[save_variables]
filename: /home/pi/printer_data/config/.variables.stb

#####################################################################
#  Virtual SD Card
#####################################################################
[virtual_sdcard]
path: /home/pi/printer_data/gcodes


[include K-ShakeTune/*.cfg]


#[EXCLUDE_OBJECT]
#[EXCLUDE_OBJECT_DEFINE]
#[EXCLUDE_OBJECT_START]
#[EXCLUDE_OBJECT_END]

#  macro that run at klipper start
[delayed_gcode _INIT]
initial_duration: 1
gcode:
  _USER_VARIABLE
  _CHECK_CONSITENT
  _EXECUTE_AT_INIT

#  macro that run at klipper start
[delayed_gcode _INIT]
initial_duration: 1
gcode:
  _USER_VARIABLE
  _CHECK_CONSITENT
  _EXECUTE_AT_INIT

[gcode_macro _EXECUTE_AT_INIT]
description: Helper: Everything that should run at klipper start
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  {% if 'gcode_macro _MENU_LIMITS' is in printer %} _MENU_LIMITS INDEX=4 {% endif %}
  {% if printer.save_variables.variables.filament_sensor %} _RESTORE_FILAMENT_SENSOR {% endif %}
  {% if user.hw.filter.ena %} _CHECK_FILTER {% endif %}
  {% if user.hw.relay.ena %} _HEATER_ON {% endif %}
  {% if user.hw.display.ena %} UPDATE_DELAYED_GCODE ID=_DISPLAY_INIT DURATION=2 {% endif %}
  _PRINT_AR T="Klipper INIT done"

[gcode_macro _CHECK_CONSITENT]
description: Helper: Check that some criterias are meet in the printer.cfg
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  {% set text = ["CONFIG: ERROR"] %}
  {% if user.run is not defined %}
    {% set _dummy = text.append("_USER_VARIABLE macro missing") %}
  {% elif not user.run %}
    {% set _dummy = text.append("_USER_VARIABLE macro not executed") %}
  {% endif %}
  {% if user.hw.auto_z_offset.auto and not user.hw.mag_probe.ena %}
    {% set _dummy = text.append("[z_calibration] defined but no MagProbe\n") %}
  {% endif %}
  {% if 'save_variables' not in printer %}
    {% set _dummy = text.append("[save_variables] missing") %}
  {% endif %}
  {% if 'virtual_sdcard' not in printer %}
    {% set _dummy = text.append("[virtual_sdcard] missing") %}
  {% endif %}
  {% if text|length > 1 %}
    {action_respond_info(text|join("\n"))}
  {% endif %}

[gcode_macro _USER_VARIABLE]
description: Helper: Contains User defined printer variables
##### see the readme for the variable definition #####
variable_hw: {}
variable_homing: {}
variable_z_hop: 0
variable_speed: {}   
variable_probe: {}
variable_park: {}
variable_filament: {}
variable_purge: {}
variable_print_start: {}
variable_unload_sd: False
variable_prime: {}
variable_respond: {}
variable_peripheral: {}
variable_run: False
gcode:
    ###################################################################
  ##                     start of user defines                     ## 
  ## this needs to be changed for your printer                     ##
  ###################################################################
  {% set user_z_endstop_xy = [150,150] %}  ; z Endstop position insight right profil
  #{% set user_z_endstop_xy = [123.0,355.0] %}  ; z Endstop position insight left profil
  {% set user_z_endstop_hop = 7.5 %}           ; z hop for moves e.g homimg
  {% set user_z_home_current = 0.3 %}          ; reduced homing curent for z
  {% set user_home_accel = 1200 %}             ; reduced ACCEL for homing
  {% set user_bed_y_offset = 5 %}              ; Endstop offset to bed max y
  ##### all user defined speeds [mm/sec] #####
  {% set user_z_hop_speed = 15 %}              ; default z_hop speed
  {% set user_retract_speed = 30 %}            ; default retract/extrude speed
  {% set user_travel_speed = 300 %}            ; travel speed e.g park, dock ...
  {% set user_probe_dock_speed = 50 %}         ; dock speed for attach/dock
  {% set user_filament_load_speed = 50 %}      ; load/unload speed
  {% set user_wipe_speed = 70 %}               ; wipe move speed 
  {% set user_prime_speed = 25 %}              ; prime line speed  
  ##### Mag Probe #####
  {% set user_probe_dock_pos = [22,295] %}      ; position of the dock 
  {% set user_probe_delta_x = 22 %}            ; x offset for position before dock
  {% set user_probe_delta_y = -30 %}           ; y offset to move probe out of dock
  {% set user_z_probe_hop = 15.5 %}            ; z minimum heigh to avoid crash vorher15.5
  ##### Park Position #####
  {% set user_park_xy_delta = 80 %}            ; distance for x or y from the edge
  {% set user_park_z_max_delta = 40 %}         ; insure to do not hit cam in front
  {% set user_park_z_min = 30 %}               ; minimal z from bed
  {% set user_park_pause_z_delta = 2.0 %}      ; distance to increase head while PAUSE/CANCEL_PRINT
  {% set user_park_at_cancel = False %}        ; park head at CANCEL_PRINT if not paused [False/True]
  ##### Filament #####
  {% set user_extruder_min_add = 30 %}         ; Temperature add to min Extruder temp
  {% set user_load_distance = 90 %}            ; load distance while load filament
  {% set user_load_extrude = 50 %}             ; extrude distance while load filament
  {% set user_unload_distance = 75 %}          ; unload distance while unload filament
  {% set user_retract_end = 2 %}               ; retract distance at PRINT_END or CANCEL_PRINT
  {% set user_retract_pause = 1 %}             ; retract/extrude distance while PAUSE or RESUME
  ##### Purge & Brush #####
  {% set user_brush_pos = 'right' %}           ; left/right profile used
  {% set user__brush_x_middle = 250 %}        ; mid point of brush at left profile
  {% set user_brush_x_middle = 250 %}          ; mid point of brush at right profil
  {% set user_brush_x_width = 50 %}            ; width of brush
  {% set user_brush_y_start = 292 %}           ; start point at y
  {% set user_wipe_z = 4 %}                  ; z for wipe moves
  {% set user_wipe_cnt = 6 %}                  ; number of full wipes
  {% set user_z_purge = 4 %}                 ; z above purge bucket
  ##### PRINT_START/STOP #####
  {% set user_print_start_bed_up = 10 %}       ; bed temp raise for faster heat soak
  {% set user_print_start_ival = 1 %}          ; wait time per call in sec
  {% set user_print_start_extruder_time = 3 %} ; time in minutes before soak end to start extruder heating 
  {% set user_print_start_bed_time = 3 %}      ; time in minutes before soak end to set bed target temp
  {% set user_print_start_prime_mult = 2 %}    ; multiplier for prime line hight 
  {% set user_unload_sd = True %}              ; unload sd file at PRINT_END or CANCEL_PRINT [True,False]
  ##### Prime Line #####
  {% set user_prime_start_xy = [7.0,30.0] %}   ; x&y start coordinates of prime line
  {% set user_prime_z = 0.34 %}                ; default prime layer hight
  {% set user_prime_dir = 'Y+' %}              ; direction of prime line (X+, X-, Y+, Y-)
  {% set user_prime_spacing = 0.4 %}           ; distance between line, move will allways positive
  {% set user_prime_lenght = 220 %}            ; length of prime line
  {% set user_prime_seg = 11 %}                ; segments in that the prime line is splitted
  {% set user_prime_extrude_per_seg = 2 %}     ; amount of filament extruded per segment
  ##### Respond defaults #####
  # Default behaivior for output messages of the macro 0: no output 1: console output
  {% set user_respond_set_z_current = 0 %}     ; Macro: _SET_Z_CURRENT
  {% set user_respond_set_acc = 0 %}           ; Macro: _SET_ACC
  {% set user_respond_probe_action = 1 %}      ; Macro: _PROBE_ACTION
  {% set user_respond_layer = 0 %}             ; Macro: _LAYER
  ##### Peripheral #####
  {% set user_filter_on = 0.5 %}               ; filter on value
  {% set user_filter_use_time = 80 %}          ; Nevermore change warning limit 
  {% set user_vent_on = 15 %}                  ; chamber fan on temperature                        
  {% set user_caselight_on = 0.4 %}            ; caselight on value
  {% set user_fan_run_after_print = 30 %}      ; time in min to run filter and chamber exhaust after print finsih 
  ###################################################################
  ##                      end of user defines                      ## 
  ###################################################################
  # get printer limits & cfg value
  {% set min = printer.toolhead.axis_minimum %}
  {% set max = printer.toolhead.axis_maximum %}
  {% set cfg_endstop_z_offset = printer.configfile.settings.stepper_z.position_endstop|default(0.0)|float %}
  # detect additional hardware
  {% set hw_dic = {'display'       : {'ena' : True if 'neopixel neo_display' in printer.configfile.settings 
                                         else False},
                   'chamber'       : {'type': 'sensor' if 'temperature_sensor chamber' in printer.configfile.settings
                                         else 'fan'    if 'temperature_fan chamber' in printer.configfile.settings 
                                         else 'none'},
                   'caselight'     : {'ena' : True if 'output_pin caselight' in printer.configfile.settings 
                                         else False},
                   'filter'        : {'ena' : True if 'fan_generic filter' in printer.configfile.settings 
                                         else False},
                   'runout'        : {'type': 'switch' if 'filament_switch_sensor runout' in printer.configfile.settings
                                         else 'motion' if 'filament_motion_sensor runout' in printer.configfile.settings
                                         else 'file'   if 'save_variables' in printer and filament_loaded in printer.save_variables.variables 
                                         else 'none'},
                   'relay'         : {'ena' : True if 'output_pin extruder_relay'   in printer.configfile.settings and
                                                      'output_pin heater_bed_relay' in printer.configfile.settings 
                                         else False},
                   'auto_z_offset' : {'type': 'z_calib+flexplate' if 'z_calibration' in printer and 'save_variables' in printer and 'plates' in printer.save_variables.variables
                                         else 'z_calib'           if 'z_calibration' in printer
                                         else 'flexplate'         if 'save_variables' in printer and 'plates' in printer.save_variables.variables 
                                         else 'none'},
                   'mag_probe'     : {'ena' : True if printer['gcode_macro _MAG_PROBE'] is defined or 'dockable_probe' in printer 
                                         else False},
                   'endstop_temp'  : {'ena' : True if 'temperature_sensor endstop' in printer.configfile.settings 
                                         else False}}%}
  {% set _dummy = hw_dic.chamber.update({'ena': True if hw_dic.chamber.type != 'none' else False}) %}
  {% set _dummy = hw_dic.chamber.update({'fan': True if hw_dic.chamber.type == 'fan' else False}) %}
  {% set _dummy = hw_dic.runout.update({'ena': True if hw_dic.runout.type != 'none' else False}) %}
  {% set _dummy = hw_dic.runout.update({'sensor': True if hw_dic.runout.type == 'switch' or hw_dic.runout.type == 'motion'
                                             else False}) %}
  {% set _dummy = hw_dic.auto_z_offset.update({'ena': True if hw_dic.auto_z_offset.type != 'none' else False}) %}
  {% set _dummy = hw_dic.auto_z_offset.update({'auto': True if hw_dic.auto_z_offset.type == 'z_calib+flexplate' or
                                                               hw_dic.auto_z_offset.type == 'z_calib'
                                                  else False}) %}
  {% set _dummy = hw_dic.auto_z_offset.update({'manu': True if hw_dic.auto_z_offset.type == 'z_calib+flexplate' or
                                                               hw_dic.auto_z_offset.type == 'flexplate'
                                                  else False}) %}
  # calc needed values
  {% set bed = {'min': {'x': min.x, 'y': min.y                    , 'z': 0    },
                'max': {'x': max.x, 'y': max.y - user_bed_y_offset, 'z': max.z}} %}
  {% set calc_center = {'x': (bed.max.x - bed.min.x) / 2,
                        'y': (bed.max.y - bed.min.y) / 2, 
                        'z': (bed.max.z - bed.min.z) / 2} %}
  {% set calc_park = {'min': {'x': bed.min.x + user_park_xy_delta,
                              'y': bed.min.y + user_park_xy_delta,
                              'z': bed.min.z + user_park_z_min},
                      'max': {'x': bed.max.x - user_park_xy_delta,
                              'y': bed.max.y - user_park_xy_delta,
                              'z': bed.max.z - user_park_z_max_delta}} %}
  {% set calc_z_endstop_z = cfg_endstop_z_offset|round(0, 'ceil') + 1.0 if cfg_endstop_z_offset > 0 else 1.0 %}
  {% set calc_z_hop = user_z_probe_hop if hw_dic.mag_probe.ena and user_z_probe_hop > user_z_endstop_hop
                 else user_z_endstop_hop %}
  {% set calc_brush = {'start': user_brush_x_middle - user_brush_x_width / 2,
                       'end'  : user_brush_x_middle + user_brush_x_width / 2} %}
  {% set calc_purge = {'x': (min.x + calc_brush.start) / 2 if user_brush_pos|lower == 'left'
                       else max.x - (max.x - calc_brush.end) / 2,
                       'y': max.y} %}
  {% set calc_wipe = {'start': {'x': calc_brush.start if user_brush_pos|lower == 'left'
                                else calc_brush.end,
                                'y': user_brush_y_start},
                      'end'  : {'x': calc_brush.end if user_brush_pos|lower == 'left'
                                else calc_brush.start,
                                'y': max.y}} %}
  # prepare dictonaries
  {% set homing_dic = {'z_endstop': {'x':user_z_endstop_xy[0], 'y':user_z_endstop_xy[1], 'z':calc_z_endstop_z, 'hop':user_z_endstop_hop},
                       'z_current': user_z_home_current,
                       'accel'    : user_home_accel} %}
  {% set purge_dic = {'purge' : {'x':calc_purge.x, 'y':calc_purge.y, 'z':user_z_purge},
                      'wipe'  : {'start'  : {'x': calc_wipe.start.x, 'y': calc_wipe.start.y, 'z':user_wipe_z},
                                 'end'    : {'x': calc_wipe.end.x,   'y': calc_wipe.end.y,   'z':user_wipe_z},
                                 'offset' : (calc_wipe.end.y - calc_wipe.start.y) / user_wipe_cnt,
                                 'cnt'    : user_wipe_cnt}} %}
  {% set probe_dic = {'dock'        : {'x'    : user_probe_dock_pos[0], 
                                       'y'    : user_probe_dock_pos[1] + user_probe_delta_y},
                      'store'       : {'x'    : user_probe_dock_pos[0] + user_probe_delta_x, 
                                       'y'    : user_probe_dock_pos[1]}} %}
  {% set speed_dic = {'z_hop'   : (user_z_hop_speed * 60),
                      'retract' : (user_retract_speed * 60),
                      'travel'  : (user_travel_speed * 60), 
                      'dock'    : (user_probe_dock_speed * 60),
                      'load'    : (user_filament_load_speed * 60),
                      'wipe'    : (user_wipe_speed * 60),
                      'prime'   : (user_prime_speed * 60)} %}
  {% set park_dic = {'bed'           : {'x': calc_center.x,   'y': calc_center.y,   'z': calc_park.min.z},
                     'center'        : {'x': calc_center.x,   'y': calc_center.y,   'z': calc_center.z},
                     'front'         : {'x': calc_center.x,   'y': calc_park.min.y, 'z': calc_park.max.z},
                     'frontlow'      : {'x': calc_center.x,   'y': calc_park.min.y, 'z': calc_park.min.z},
                     'rear'          : {'x': calc_park.min.x, 'y': calc_park.max.y, 'z': calc_park.max.z},
                     'pause'         : {'x': calc_purge.x,    'y': calc_purge.y,   'dz': user_park_pause_z_delta},
                     'park_at_cancel': user_park_at_cancel} %}
  {% set filament_dic = {'load_distance'   : user_load_distance,
                         'load_extrude'    : user_load_extrude,
                         'unload_distance' : user_unload_distance,
                         'retract'         : {'end'   : user_retract_end,
                                              'pause' : user_retract_pause,
                                              'cancel': user_retract_end - user_retract_pause}} %}
  {% set prime_dic = {'pos'             : {'x':user_prime_start_xy[0], 'y':user_prime_start_xy[1], 'z':user_prime_z},
                      'dir'             : user_prime_dir,
                      'spacing'         : user_prime_spacing,
                      'length_per_seg'  : user_prime_lenght / user_prime_seg,
                      'seg'             : user_prime_seg,
                      'extrude_per_seg' : user_prime_extrude_per_seg} %}
  {% set print_start_dic = {'bed_up'     : user_print_start_bed_up|float|round(1),
                            'ival'       : user_print_start_ival|int,
                            'time'       : {'extruder' : (user_print_start_extruder_time * 60)|int,
                                            'bed'      : (user_print_start_bed_time * 60)|int},
                            'prime_mult' : user_print_start_prime_mult|float} %}
  {% set respond_dic = {'z_current'    : user_respond_set_z_current, 
                        'acc'          : user_respond_set_acc, 
                        'probe_action' : user_respond_probe_action, 
                        'layer'        : user_respond_layer} %}
  {% set peripheral_dic =  {'filter'     : {'on_val'          : user_filter_on,
                                            'warning'         : user_filter_use_time,
                                            'run_after_print' : (user_fan_run_after_print * 60)},
                            'vent'      : {'on_val'          : user_vent_on,
                                           'run_after_print' : ((user_fan_run_after_print * 60) + 5)},
                            'caselight' : {'on_val' : user_caselight_on}} %}
  # store results in variable
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=hw VALUE="{hw_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=homing VALUE="{homing_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=z_hop VALUE={calc_z_hop}
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=speed VALUE="{speed_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=probe VALUE="{probe_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=park VALUE="{park_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=filament VALUE="{filament_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=purge VALUE="{purge_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=print_start VALUE="{print_start_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=unload_sd VALUE={user_unload_sd}
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=prime VALUE="{prime_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=respond VALUE="{respond_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=peripheral VALUE="{peripheral_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=run VALUE=True

## 	Thermistor Types
##   "EPCOS 100K B57560G104F"
##   "ATC Semitec 104GT-2"
##   "NTC 100K beta 3950"
##   "Honeywell 100K 135-104LAG-J01"
##   "NTC 100K MGB18-104F39050L32" (Keenovo Heater Pad)
##   "AD595"
##   "PT100 INA826"

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [bed_mesh PEi-Bed_Temp-115C]
#*# version = 1
#*# points =
#*# 	0.059585, 0.053986, 0.054985, 0.055125, 0.052606, 0.053026, 0.059891, 0.062002, 0.060099, 0.047613, 0.045334, 0.043015, 0.045475, 0.043312, 0.041566, 0.047995, 0.052000, 0.060766, 0.059986, 0.067102, 0.067550, 0.073499, 0.068084, 0.071853, 0.068413
#*# 	0.049252, 0.053011, 0.051388, 0.050039, 0.048587, 0.053632, 0.058327, 0.058555, 0.052891, 0.046817, 0.043397, 0.040405, 0.040306, 0.039866, 0.042727, 0.044166, 0.047927, 0.053363, 0.058625, 0.062234, 0.062644, 0.065382, 0.066647, 0.066135, 0.060202
#*# 	0.043731, 0.046999, 0.049257, 0.046690, 0.045120, 0.051161, 0.056250, 0.054903, 0.050086, 0.042210, 0.038210, 0.038845, 0.038277, 0.037136, 0.039607, 0.042021, 0.044625, 0.050124, 0.053634, 0.060624, 0.059059, 0.060585, 0.059355, 0.059411, 0.052218
#*# 	0.039699, 0.041574, 0.042669, 0.040772, 0.044929, 0.048205, 0.050762, 0.051060, 0.046303, 0.038652, 0.033334, 0.034455, 0.035065, 0.036941, 0.038321, 0.039914, 0.043097, 0.047891, 0.052620, 0.055066, 0.054953, 0.054447, 0.054006, 0.051202, 0.047446
#*# 	0.037976, 0.039593, 0.041235, 0.042555, 0.044265, 0.048484, 0.051768, 0.050790, 0.044751, 0.037965, 0.033681, 0.033502, 0.035301, 0.036155, 0.039043, 0.040548, 0.043178, 0.045227, 0.053367, 0.053974, 0.052518, 0.049143, 0.051774, 0.048364, 0.045714
#*# 	0.034623, 0.034175, 0.036646, 0.040342, 0.043503, 0.046857, 0.048295, 0.047947, 0.044197, 0.037097, 0.031066, 0.032395, 0.034566, 0.037650, 0.039449, 0.041572, 0.044333, 0.048624, 0.053792, 0.056121, 0.053584, 0.050282, 0.049140, 0.046959, 0.045709
#*# 	0.024769, 0.025808, 0.026835, 0.028470, 0.033376, 0.035608, 0.038765, 0.036575, 0.033480, 0.027685, 0.022992, 0.022275, 0.027074, 0.032058, 0.033332, 0.036391, 0.038217, 0.045811, 0.048854, 0.051688, 0.047508, 0.045338, 0.045237, 0.041095, 0.039355
#*# 	0.016872, 0.017950, 0.022420, 0.023645, 0.026387, 0.030299, 0.032095, 0.030349, 0.025435, 0.021128, 0.018152, 0.018623, 0.021892, 0.025656, 0.028930, 0.032373, 0.035723, 0.040482, 0.044758, 0.047241, 0.045486, 0.041128, 0.037060, 0.036713, 0.033329
#*# 	0.007977, 0.008518, 0.011080, 0.012592, 0.016998, 0.018667, 0.021809, 0.019748, 0.016520, 0.010020, 0.008755, 0.010580, 0.012023, 0.014503, 0.019654, 0.025148, 0.028588, 0.030864, 0.037322, 0.042180, 0.036772, 0.030088, 0.028480, 0.029441, 0.027116
#*# 	-0.000128, 0.001926, 0.004435, 0.005904, 0.008652, 0.012662, 0.014938, 0.015097, 0.012215, 0.008157, 0.005254, 0.002493, 0.009008, 0.010260, 0.014815, 0.018951, 0.025583, 0.029525, 0.032751, 0.034038, 0.029032, 0.029566, 0.023481, 0.020627, 0.016189
#*# 	-0.004172, -0.004240, -0.001491, 0.000288, 0.002948, 0.006668, 0.008000, 0.009802, 0.008618, 0.004690, 0.001367, 0.000991, 0.002049, 0.005496, 0.009043, 0.014919, 0.021071, 0.024573, 0.026675, 0.027756, 0.025101, 0.021229, 0.016793, 0.013894, 0.012450
#*# 	-0.004158, -0.006788, -0.004209, -0.006243, 0.003490, 0.003736, 0.005623, 0.006292, 0.005772, 0.003156, -0.000241, -0.000909, 0.000789, 0.005849, 0.007704, 0.012918, 0.016930, 0.023488, 0.023550, 0.024658, 0.023317, 0.019229, 0.013717, 0.010031, 0.009621
#*# 	-0.008144, -0.013207, -0.007718, -0.006472, -0.001431, -0.002030, 0.001438, 0.001771, 0.003518, -0.001538, -0.006574, -0.004551, 0.000472, 0.000761, 0.000901, 0.008596, 0.017252, 0.017784, 0.016890, 0.021295, 0.021782, 0.014492, 0.009635, 0.005673, 0.008149
#*# 	-0.014256, -0.009264, -0.003024, -0.004717, -0.006731, -0.000834, 0.005797, 0.001638, -0.000862, -0.007614, -0.001002, -0.001682, -0.003564, -0.003183, 0.004314, 0.011688, 0.012995, 0.014460, 0.024149, 0.022411, 0.018220, 0.014792, 0.014163, 0.006104, -0.000380
#*# 	-0.009913, -0.010084, -0.005322, -0.008608, -0.004194, -0.001418, 0.000706, 0.003329, -0.004384, -0.004911, -0.006582, -0.003095, -0.007908, -0.000908, 0.003208, 0.008386, 0.013448, 0.017128, 0.020071, 0.020634, 0.017303, 0.008374, 0.008974, 0.004890, 0.007301
#*# 	-0.012354, -0.014398, -0.003742, -0.006733, -0.005883, -0.003760, -0.002032, -0.002001, -0.003647, -0.007075, -0.013206, -0.005996, -0.006394, -0.002991, 0.002052, 0.008025, 0.013765, 0.017333, 0.017985, 0.015477, 0.019263, 0.011663, 0.006306, 0.002253, 0.000135
#*# 	-0.012015, -0.011007, -0.007825, -0.007690, -0.005370, -0.002905, -0.000635, -0.002423, -0.004106, -0.007343, -0.008511, -0.010241, -0.005874, -0.002001, 0.003244, 0.010654, 0.012232, 0.017456, 0.019108, 0.021349, 0.013279, 0.012963, 0.007773, 0.006419, -0.000085
#*# 	-0.010314, -0.012951, -0.004107, -0.005105, -0.005556, -0.000534, 0.003661, 0.000669, -0.003917, -0.002964, -0.004749, -0.004725, -0.003961, 0.002848, 0.010371, 0.010397, 0.017293, 0.020344, 0.024730, 0.018004, 0.018598, 0.015986, 0.015290, 0.007534, 0.002059
#*# 	-0.007441, -0.005573, -0.002113, -0.000157, 0.002688, 0.005083, 0.006244, 0.005796, 0.004406, 0.001255, -0.000834, -0.000432, 0.003066, 0.005781, 0.009897, 0.014827, 0.019249, 0.022363, 0.023425, 0.023507, 0.022890, 0.021289, 0.017000, 0.012276, 0.011489
#*# 	-0.001955, -0.000643, 0.003081, 0.006457, 0.007989, 0.009854, 0.011218, 0.010321, 0.008867, 0.005020, 0.002722, 0.002181, 0.003639, 0.006155, 0.011739, 0.016124, 0.020529, 0.023057, 0.025701, 0.027795, 0.026506, 0.024454, 0.021108, 0.021243, 0.020527
#*# 	0.006077, 0.006744, 0.010597, 0.012190, 0.016899, 0.017330, 0.018163, 0.017367, 0.014769, 0.011260, 0.009365, 0.009100, 0.009758, 0.013920, 0.017140, 0.020443, 0.023240, 0.026944, 0.031022, 0.033962, 0.032255, 0.030691, 0.027474, 0.027023, 0.027732
#*# 	0.013559, 0.013258, 0.015181, 0.017926, 0.020665, 0.023399, 0.024710, 0.023749, 0.021558, 0.018060, 0.016442, 0.016719, 0.018095, 0.020562, 0.024256, 0.026657, 0.028991, 0.031480, 0.036129, 0.037704, 0.035608, 0.033529, 0.031690, 0.032250, 0.033125
#*# 	0.023498, 0.022345, 0.025542, 0.028199, 0.031154, 0.032278, 0.034406, 0.034570, 0.031205, 0.026805, 0.025566, 0.025885, 0.026908, 0.029106, 0.032344, 0.035142, 0.036735, 0.038744, 0.041210, 0.043458, 0.041269, 0.038811, 0.037646, 0.038299, 0.038992
#*# 	0.027715, 0.027790, 0.030020, 0.033446, 0.035028, 0.037280, 0.037629, 0.036906, 0.034580, 0.032626, 0.031557, 0.031738, 0.032343, 0.033649, 0.035640, 0.037645, 0.038235, 0.038805, 0.041133, 0.044180, 0.042650, 0.039989, 0.038754, 0.039898, 0.041174
#*# 	0.035813, 0.035820, 0.038390, 0.039308, 0.040193, 0.040998, 0.043099, 0.042058, 0.041099, 0.040130, 0.039202, 0.038161, 0.038094, 0.039361, 0.039991, 0.039982, 0.040451, 0.041243, 0.043233, 0.045365, 0.044415, 0.042818, 0.040210, 0.040859, 0.043696
#*# x_count = 25
#*# y_count = 25
#*# mesh_x_pps = 0
#*# mesh_y_pps = 0
#*# algo = direct
#*# tension = 0.1
#*# min_x = 30.0
#*# max_x = 270.0
#*# min_y = 30.0
#*# max_y = 250.0
#*#
#*# [scanner model default]
#*# model_coef = 1.3666571874468711,
#*# 	1.8208875642882751,
#*# 	0.7845442244798141,
#*# 	0.19866798824707643,
#*# 	0.2904896011818795,
#*# 	0.8271316865478546,
#*# 	-0.06345727148919014,
#*# 	-0.7918860596474683,
#*# 	0.17174025997517708,
#*# 	0.3968285527042721
#*# model_domain = 3.176261765659641e-07,3.3189624844028555e-07
#*# model_range = 0.100000,5.000000
#*# model_temp = 48.582403
#*# model_offset = 0.00000
#*#
#*# [scanner]
#*# scanner_touch_threshold = 4250
#*# scanner_touch_z_offset = 0.150
